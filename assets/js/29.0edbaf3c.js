(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{360:function(a,t,s){"use strict";s.r(t);var r=s(3),v=Object(r.a)({},(function(){var a=this,t=a._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#修饰符"}},[a._v("#")]),a._v(" 修饰符")]),a._v(" "),t("h2",{attrs:{id:"包"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#包"}},[a._v("#")]),a._v(" 包")]),a._v(" "),t("p",[a._v("包的概念其实就是文件夹,对类进行分类管理")]),a._v(" "),t("h3",{attrs:{id:"定义格式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#定义格式"}},[a._v("#")]),a._v(" 定义格式")]),a._v(" "),t("p",[a._v("格式:package 包名;(多级包用.分开)   如果package 包名1.包名2;")]),a._v(" "),t("h2",{attrs:{id:"权限修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#权限修饰符"}},[a._v("#")]),a._v(" 权限修饰符")]),a._v(" "),t("p",[a._v("public > protected > 默认 > privater")]),a._v(" "),t("h2",{attrs:{id:"状态修饰符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#状态修饰符"}},[a._v("#")]),a._v(" 状态修饰符")]),a._v(" "),t("h3",{attrs:{id:"final"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[a._v("#")]),a._v(" final")]),a._v(" "),t("p",[a._v("final关键字是最终意思,可以修饰成员方法,成员变量,类")]),a._v(" "),t("ol",[t("li",[a._v("被final修饰后的方法 无法被重写")]),a._v(" "),t("li",[a._v("被final修饰后的成员变量 无法重新赋值")]),a._v(" "),t("li",[a._v("被final修饰后的类无法成为父类被继承")])]),a._v(" "),t("p",[a._v("如果final修饰是常规变量,则该变量不能被重新赋值")]),a._v(" "),t("p",[a._v("如果final修饰是引用型变量,则该变量指向的地址值不能被更改,但指向地址的内部能被修改.")]),a._v(" "),t("h3",{attrs:{id:"static"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[a._v("#")]),a._v(" static")]),a._v(" "),t("p",[a._v("被static修饰后的变量会被类的所有对象共享")]),a._v(" "),t("p",[a._v("通过类名或者对象来继续 修改值,会一直保存在类中,所有对象都能访问")]),a._v(" "),t("h3",{attrs:{id:"访问特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#访问特点"}},[a._v("#")]),a._v(" 访问特点")]),a._v(" "),t("p",[a._v("静态方法  无法访问不是静态的方法和变量")]),a._v(" "),t("p",[a._v("非静态方法 可以访问静态和非静态的方法和变量")])])}),[],!1,null,null,null);t.default=v.exports}}]);