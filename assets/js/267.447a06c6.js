(window.webpackJsonp=window.webpackJsonp||[]).push([[267],{597:function(t,s,a){"use strict";a.r(s);var r=a(3),n=Object(r.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"贪心"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#贪心"}},[t._v("#")]),t._v(" 贪心")]),t._v(" "),s("p",[t._v("贪心算法（又称贪婪算法）是指，在对问题求解时，总是做出在当前看来是最好的选择。也就是说，不从整体最优上加以考虑，算法得到的是在某种意义上的局部最优解  。一般验证比较困难，我们可以使用对数器进行验证。")]),t._v(" "),s("h2",{attrs:{id:"字符拼接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#字符拼接"}},[t._v("#")]),t._v(" 字符拼接")]),t._v(" "),s("p",[t._v("给定一个由字符串组成的数组strs，必须把所有的字符串拼接起来，返回所有可能的拼接结果中字典序最小的结果")]),t._v(" "),s("h2",{attrs:{id:"切金条"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切金条"}},[t._v("#")]),t._v(" 切金条")]),t._v(" "),s("p",[t._v("一块金条切成两半，是需要花费和长度数值一样的铜板\n比如长度为20的金条，不管怎么切都要花费20个铜板，一群人想整分整块金条，怎么分最省铜板?\n例如，给定数组{10,20,30}，代表一共三个人，整块金条长度为60，金条要分成10，20，30三个部分。\n如果先把长度60的金条分成10和50，花费60；再把长度50的金条分成20和30，花费50；一共花费110铜板\n但如果先把长度60的金条分成30和30，花费60；再把长度30金条分成10和20，花费30；一共花费90铜板\n\v输入一个数组，返回分割的最小代价")]),t._v(" "),s("h2",{attrs:{id:"放灯笼"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#放灯笼"}},[t._v("#")]),t._v(" 放灯笼")]),t._v(" "),s("p",[t._v("给定一个字符串str，只由'X'和'.'两种字符构成\n'X'表示墙，不能放灯，也不需要点亮；'.'表示居民点，可以放灯，需要点亮\n如果灯放在i位置，可以让i-1，i和i+1三个位置被点亮\n返回如果点亮str中所有需要点亮的位置，至少需要几盏灯")]),t._v(" "),s("h2",{attrs:{id:"会议安排"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#会议安排"}},[t._v("#")]),t._v(" 会议安排")]),t._v(" "),s("p",[t._v("一些项目要占用一个会议室宣讲，会议室不能同时容纳两个项目的宣讲，给你每一个项目开始的时间和结束的时间\n你来安排宣讲的日程，要求会议室进行的宣讲的场次最多，返回最多的宣讲场次")]),t._v(" "),s("h2",{attrs:{id:"股票问题变种"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#股票问题变种"}},[t._v("#")]),t._v(" 股票问题变种")]),t._v(" "),s("p",[t._v("输入正数数组costs、正数数组profits、正数K和正数M\n\vcosts[i]表示i号项目的花费\nprofits[i]表示i号项目在扣除花费之后还能挣到的钱(利润)\nK表示你只能串行的最多做k个项目\nM表示你初始的资金\n说明：每做完一个项目，马上获得的收益，可以支持你去做下一个项目，不能并行的做项目。\n输出：最后获得的最大钱数")])])}),[],!1,null,null,null);s.default=n.exports}}]);