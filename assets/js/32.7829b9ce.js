(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{363:function(v,_,a){"use strict";a.r(_);var t=a(3),s=Object(t.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h1",{attrs:{id:"接口"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[v._v("#")]),v._v(" 接口")]),v._v(" "),_("p",[v._v("概述")]),v._v(" "),_("p",[v._v("接口是一种公共的规范标准,只要符合规范标准,都是通用,java中的接口更多提醒在对行为的抽象")]),v._v(" "),_("h2",{attrs:{id:"特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[v._v("#")]),v._v(" 特点")]),v._v(" "),_("p",[v._v("使用关键字 interface 修饰")]),v._v(" "),_("p",[v._v("如:public interface 接口名{}")]),v._v(" "),_("p",[v._v("类实现接口(类似继承)用implements关键字")]),v._v(" "),_("p",[v._v("如:")]),v._v(" "),_("div",{staticClass:"language-java line-numbers-mode"},[_("pre",{pre:!0,attrs:{class:"language-java"}},[_("code",[_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("public")]),v._v(" "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("class")]),v._v(" 类名 "),_("span",{pre:!0,attrs:{class:"token keyword"}},[v._v("implements")]),v._v(" 接口名"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("{")]),v._v("\n    \n"),_("span",{pre:!0,attrs:{class:"token punctuation"}},[v._v("}")]),v._v("\n")])]),v._v(" "),_("div",{staticClass:"line-numbers-wrapper"},[_("span",{staticClass:"line-number"},[v._v("1")]),_("br"),_("span",{staticClass:"line-number"},[v._v("2")]),_("br"),_("span",{staticClass:"line-number"},[v._v("3")]),_("br")])]),_("p",[v._v("接口不能被实例化,跟多态的方式一样,通过类对象实例化,称为接口多态")]),v._v(" "),_("p",[v._v("多态的形式:具体类多态,抽象类多态,接口多态")]),v._v(" "),_("p",[v._v("多态的前提:")]),v._v(" "),_("ol",[_("li",[v._v("有继承或实现关系;")]),v._v(" "),_("li",[v._v("有方法重写;")]),v._v(" "),_("li",[v._v("有父类或接口引用指向 子类或实现 类对象")])]),v._v(" "),_("h2",{attrs:{id:"成员特点"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#成员特点"}},[v._v("#")]),v._v(" 成员特点")]),v._v(" "),_("p",[v._v("成员变量: 只能常量    默认修饰符:public static final")]),v._v(" "),_("p",[v._v("构造方法:接口没有构造方法,因为接口的主要是对行为进行抽象的,是没有具体存在")]),v._v(" "),_("p",[v._v("一个类如果没有父类,默认继承自object类")]),v._v(" "),_("p",[v._v("成员方法:只能是抽象方法  默认修饰符:public abstract")]),v._v(" "),_("h2",{attrs:{id:"类和接口的关系"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#类和接口的关系"}},[v._v("#")]),v._v(" 类和接口的关系")]),v._v(" "),_("p",[v._v("类和类的关系:")]),v._v(" "),_("p",[v._v("继承关系,只能单继承,但是可以多层继承")]),v._v(" "),_("p",[v._v("类和接口的关系:")]),v._v(" "),_("p",[v._v("实现关系,可以单实现,也可以多实现,还可以再继承一个类同时实现多个接口")]),v._v(" "),_("p",[v._v("接口和接口的关系:")]),v._v(" "),_("p",[v._v("继承关系,可以单继承,也可以多继承")]),v._v(" "),_("h2",{attrs:{id:"抽象类与接口的区别"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#抽象类与接口的区别"}},[v._v("#")]),v._v(" 抽象类与接口的区别")]),v._v(" "),_("p",[v._v("成员区别:")]),v._v(" "),_("p",[v._v("抽象类   变量,常量;有构造方法;有抽象方法;也有非抽象方法")]),v._v(" "),_("p",[v._v("接口 常量;抽象方法")]),v._v(" "),_("p",[v._v("关系区别:")]),v._v(" "),_("p",[v._v("类与类   继承,单继承")]),v._v(" "),_("p",[v._v("类与接口 实现,可单实现,也可多实现")]),v._v(" "),_("p",[v._v("接口与接口 继承,单继承,多继承")]),v._v(" "),_("p",[v._v("设计理念区别:")]),v._v(" "),_("p",[v._v("抽象类  对类抽象,包括属性、行为")]),v._v(" "),_("p",[v._v("接口 对行为抽象，主要是行为")]),v._v(" "),_("p",[v._v("抽象类是对事物的抽象,而接口是对行为的抽象")])])}),[],!1,null,null,null);_.default=s.exports}}]);