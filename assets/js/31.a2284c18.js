(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{362:function(t,a,s){"use strict";s.r(a);var v=s(3),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"抽象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象"}},[t._v("#")]),t._v(" 抽象")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("abstract 关键字")])]),t._v(" "),a("li",[a("p",[t._v("一个没有方法体的方法应该定义为抽象方法,如果类中有抽象方法,则类必须定义为抽象类")])]),t._v(" "),a("li",[a("p",[t._v("抽象类中不一定有抽象方法")])]),t._v(" "),a("li",[a("p",[t._v("抽象类不能实例化,但可以参照多态的形式,通过子类对象实例化,称为抽象类多态")])]),t._v(" "),a("li",[a("p",[t._v("抽象类的子类  要么定义为抽象类  要么重写抽象类中所有抽象方法")])])]),t._v(" "),a("h3",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[t._v("#")]),t._v(" 特点")]),t._v(" "),a("p",[t._v("成员变量: 可以是常量和变量")]),t._v(" "),a("p",[t._v("构造方法:有构造方法,但不能实例化,用于子类访问父类数据的初始化")]),t._v(" "),a("p",[t._v("成员方法:可有抽象方法,用于限定子类必须完成某些动作.也可以有非抽象方法,提高代码复用性")])])}),[],!1,null,null,null);a.default=_.exports}}]);